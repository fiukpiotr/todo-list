{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","todoList","setTodoList","useState","currentTask","setCurrentTask","inputTask","useRef","useEffect","savedTasks","localStorage","getItem","JSON","parse","saveTasks","newTasks","setItem","stringify","addTask","current","value","task","completed","swal","React","createElement","className","id","ref","type","pattern","maxLength","placeholder","onKeyDown","event","key","onChange","target","onClick","map","val","tasktoComplete","completeTask","taskToDelete","filter","deleteTask","role","aria-label","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iLA2FeA,MAvFf,WACE,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAaC,GAAkBF,mBAAS,IAEzCG,EAAYC,iBAAO,MAEzBC,oBAAU,KACR,MAAMC,EAAaC,aAAaC,QAAQ,YACpCF,GAAYP,EAAYU,KAAKC,MAAMJ,KACtC,IAEH,MAAMK,EAAaC,IACjBL,aAAaM,QAAQ,WAAYJ,KAAKK,UAAUF,KAG5CG,EAAUA,KACd,GAAgC,KAA5BZ,EAAUa,QAAQC,MAAc,CAClC,MAAML,EAAW,IAAId,EAAU,CAAEoB,KAAMjB,EAAakB,WAAW,IAC/DpB,EAAYa,GACZD,EAAUC,GACVT,EAAUa,QAAQC,MAAQ,GAC1Bf,EAAe,SAEfkB,IAAK,oEAoBT,OACEC,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAA,WACED,IAAAC,cAAA,WACED,IAAAC,cAAA,SACEE,GAAG,WACHC,IAAKtB,EACLuB,KAAK,OACLC,QAAQ,UACRC,UAAU,KACVC,YAAY,UACZC,UAAYC,IAA6B,UAAdA,EAAMC,KAAiBjB,KAClDkB,SAAWF,IACT7B,EAAe6B,EAAMG,OAAOjB,UAGhCI,IAAAC,cAAA,OAAKC,UAAU,YAAW,sBAE5BF,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAQa,QAASpB,EAASS,GAAG,mBAAkB,gBAGnDH,IAAAC,cAAA,WACAD,IAAAC,cAAA,UACGxB,EAASsC,IAAI,CAACC,EAAKL,IAEhBX,IAAAC,cAAA,OAAKE,GAAG,QACNH,IAAAC,cAAA,MAAIU,IAAKA,GAAMK,EAAInB,MACnBG,IAAAC,cAAA,UAAQa,QAASA,IAvCPG,KACpB,MAAM1B,EAAWd,EAASsC,IAAKlB,GAC/BA,EAAKA,OAASoB,EACV,CAAEpB,KAAMoB,EAAgBnB,WAAYD,EAAKC,WACzCD,GAENnB,EAAYa,GACZD,EAAUC,IAgCyB2B,CAAaF,EAAInB,OACrCmB,EAAIlB,UAAY,OAAS,QAE5BE,IAAAC,cAAA,UAAQE,GAAG,gBAAgBW,QAASA,IAhD5BK,KAClB,MAAM5B,EAAWd,EAAS2C,OAAQvB,GAASA,EAAKA,OAASsB,GACzDzC,EAAYa,GACZD,EAAUC,IA6C0C8B,CAAWL,EAAInB,OAAO,KAG/DmB,EAAIlB,UAAYE,IAAAC,cAAA,UAAID,IAAAC,cAAA,QAAMqB,KAAK,MAAMC,aAAW,WAAU,WAAgB,QCtE1EC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCFDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzC,IAAAC,cAACD,IAAM0C,WAAU,KACf1C,IAAAC,cAACzB,EAAG,QAKRgD","file":"static/js/main.8553576a.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport swal from \"sweetalert\";\n\nfunction App() {\n  const [todoList, setTodoList] = useState([]);\n  const [currentTask, setCurrentTask] = useState(\"\");\n\n  const inputTask = useRef(null);\n  \n  useEffect(()=>{\n    const savedTasks = localStorage.getItem('todoList');\n    if (savedTasks) setTodoList(JSON.parse(savedTasks))\n  }, []); \n\n  const saveTasks = (newTasks) => {\n    localStorage.setItem(\"todoList\", JSON.stringify(newTasks))\n  };\n\n  const addTask = () => {\n    if (inputTask.current.value !== \"\") {\n      const newTasks = [...todoList, { task: currentTask, completed: false }];\n      setTodoList(newTasks);\n      saveTasks(newTasks);\n      inputTask.current.value = \"\";\n      setCurrentTask(\"\");\n    } else {\n      swal(\"You have to write the name for your task to add it to the list.\");\n    }\n  };\n\n  const deleteTask = (taskToDelete) => {\n    const newTasks = todoList.filter((task) => task.task !== taskToDelete);\n    setTodoList(newTasks);\n    saveTasks(newTasks);\n  };\n\n  const completeTask = (tasktoComplete) => {\n    const newTasks = todoList.map((task) => \n    task.task === tasktoComplete\n      ? { task: tasktoComplete, completed: !task.completed }\n      : task\n  );\n  setTodoList(newTasks);\n  saveTasks(newTasks);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Todo List</h1>\n      <div>\n        <div>\n          <input\n            id=\"add-task\"\n            ref={inputTask}\n            type=\"text\"\n            pattern=\".{0,19}\"\n            maxLength=\"20\"\n            placeholder=\"Task...\"\n            onKeyDown={(event) => {if (event.key === \"Enter\") addTask()}}\n            onChange={(event) => {\n              setCurrentTask(event.target.value);\n            }}\n          />\n          <div className=\"errorMsg\">Max 20 Characters</div>\n        </div>\n        <div>\n          <button onClick={addTask} id=\"add-task-button\"> Add Task </button>\n        </div>\n      </div>\n      <hr />\n      <ul>\n        {todoList.map((val, key) => {\n          return (\n            <div id=\"task\">\n              <li key={key}>{val.task}</li>\n              <button onClick={() => completeTask(val.task)}>\n                {val.completed ? \"undo\" : \"done\"}\n              </button>\n              <button id=\"delete-button\" onClick={() => deleteTask(val.task)}>\n                x\n              </button>\n              {val.completed ? <h2><span role=\"img\" aria-label=\"Checked\">âœ…</span></h2> : \"\"}\n            </div>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}